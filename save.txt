/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import React, { useEffect, useState, useRef } from "react";
import axios from "axios";

const LIMIT = 6;

const HomeScreen = () => {
  const [posts, setPosts] = useState<any[]>([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const observerRef = useRef(null);

  const [searchTerm, setSearchTerm] = useState("");
  const [sentimentFilter, setSentimentFilter] = useState("");

  useEffect(() => {
    fetchPosts(1, true);
  }, [searchTerm, sentimentFilter]);

  useEffect(() => {
    if (!observerRef.current) return;

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && !loading && hasMore) {
          fetchPosts(page + 1);
        }
      },
      { threshold: 1 }
    );

    const current = observerRef.current;
    observer.observe(current);
    return () => observer.unobserve(current);
  }, [observerRef.current, loading, hasMore, page]);

  const fetchPosts = async (pageNum: number, reset = false) => {
    setLoading(true);
    try {
      const res = await axios.get(`/api/posts`, {
        params: {
          page: pageNum,
          search: searchTerm,
          sentiment: sentimentFilter || undefined,
        },
      });

      const data = res.data;
      if (reset) {
        setPosts(data);
      } else {
        setPosts((prev) => [...prev, ...data]);
      }

      setPage(pageNum);
      setHasMore(data.length === LIMIT);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto px-4 py-6">
      {/* Search Bar */}
      <div className="flex gap-2 mb-6">
        <input
          type="text"
          placeholder="Search by company name..."
          className="w-full px-4 py-2 border rounded-md"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select
          className="px-3 py-2 border rounded-md"
          value={sentimentFilter}
          onChange={(e) => setSentimentFilter(e.target.value)}
        >
          <option value="">All</option>
          <option value="Positive">Positive</option>
          <option value="Negative">Negative</option>
        </select>
      </div>

      {/* Post Cards */}
      {posts.map((post) => (
        <div
          key={post.id}
          className="mb-6 border border-gray-300 rounded-lg p-4 shadow-sm bg-white"
        >
          <h2 className="text-xl font-semibold">{post.title}</h2>
          <p className="text-sm text-gray-600 mb-1">
            by {post.author?.name || "Unknown"} &nbsp; | &nbsp;
            {new Date(post.createdAt).toLocaleDateString()}
          </p>
          <p className="text-gray-800 mt-2">{post.content?.slice(0, 300)}...</p>
        </div>
      ))}

      {/* Loading Spinner or End Message */}
      <div ref={observerRef} className="h-10 flex justify-center items-center">
        {loading && <span>Loading more...</span>}
        {!hasMore && !loading && <span>No more posts.</span>}
      </div>
    </div>
  );
};

export default HomeScreen;

















"use client";

import { useEffect, useState } from "react";
import axios from "axios";

interface Comment {
  id: number;
  content: string;
  createdAt: string;
  user: { name: string };
}

export default function CommentSection({ postId }: { postId: number }) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");

  useEffect(() => {
    axios.get(`/api/posts/${postId}/comments`).then((res) => {
      setComments(res.data);
    });
  }, [postId]);

  const handleSubmit = async () => {
    if (!newComment.trim()) return;

    const res = await axios.post(`/api/posts/${postId}/comments`, {
      content: newComment,
    });

    setComments([res.data, ...comments]);
    setNewComment("");
  };

  return (
    <div className="mt-8">
      <h3 className="text-lg font-semibold mb-3">Comments</h3>

      <div className="flex flex-col gap-2 mb-4">
        <textarea
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          className="w-full border px-3 py-2 rounded resize-none"
          rows={3}
          placeholder="Write a comment..."
        />
        <button
          onClick={handleSubmit}
          className="self-end px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Post
        </button>
      </div>

      <div className="space-y-4">
        {comments.length === 0 && (
          <p className="text-sm text-gray-600 italic">No comments yet.</p>
        )}
        {comments.map((c) => (
          <div key={c.id} className="bg-gray-50 p-3 rounded border">
            <p className="text-sm text-gray-700">{c.content}</p>
            <p className="text-xs text-gray-500 mt-1">
              â€“ {c.user.name} on {new Date(c.createdAt).toLocaleDateString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}
